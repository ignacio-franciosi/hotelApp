trigger:
  branches:
    include:
    - main
pool:
  vmImage: 'windows-latest'
variables:
- name: nodeVersion
  value: '18.19.0'
- name: ConnectedServiceName
  value: 'ServiceConnectionARM'
- name: acrLoginServer
  value: 'acrignaciofranciosi.azurecr.io'
- name: acrName
  value: 'ACRignacioFranciosi'
- name: backImageName
  value: 'hotel-crud-api'
- name: frontImageName
  value: 'hotel-crud-front'  
- name: solution
  value: '**/*.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
- name: frontPath
  value: './HotelCrudAngular'
- name: backPath
  value: './HotelCrudApi'
- name: ResourceGroupName 
  value: 'hotelApp' #Por ejemplo 'TPS_INGSOFT3_UCC'
- name: backContainerInstanceNameQA 
  value: 'igfr-crud-api-qa' #Por ejemplo 'as-crud-api-qa'
- name: backImageTag
  value: 'latest' 
- name: container-cpu-api-qa 
  value: 1 #CPUS de nuestro container de QA
- name: container-memory-api-qa 
  value: 1.5 #RAM de nuestro container de QA
- name: frontContainerInstanceNameQA
  value: 'igfr-front-qa'
- name: frontImageTag
  value: 'latest'
- name: container-cpu-front-qa
  value: 1
- name: container-memory-front-qa
  value: 1.5
- name: backContainerInstanceNameProd
  value: 'igfr-container-back-prod'
- name: frontContainerInstanceNameProd
  value: 'igfr-container-front-prod'
- name: WebAppApiNameContainersQA
  value: 'igfr-crud-api-qa'
- name: AppServicePlanLinux
  value: 'hotelApp'
- name: WebAppFrontNameContainersQA
  value: 'igfr-front-qa'
- name: WebAppApiNameContainersProd
  value: igfr-container-back-prod
- name: WebAppFrontNameContainersProd
  value: igfr-container-front-prod
stages:
- stage: BuildAndTest
  displayName: "Build and Test API and Front"
  jobs:
  - job: BuildDotnet
    displayName: "Build and Test API"
    pool:
      vmImage: 'windows-latest'
    steps:
  
    - task: DotNetCoreCLI@2
      displayName: 'Restaurar paquetes NuGet'
      inputs:
        command: restore
        projects: '$(solution)'
      
    - task: DotNetCoreCLI@2
      displayName: 'Ejecutar pruebas de la API'
      inputs:
        command: 'test'
        projects: '**/*.Tests.csproj'
        arguments: '--collect:"XPlat Code Coverage"'
    - task: PublishCodeCoverageResults@2
      displayName: 'Publicar resultados de code coverage del back-end'
      inputs:
        summaryFileLocation: '$(Agent.TempDirectory)/**/*.cobertura.xml'
        failIfCoverageEmpty: false
    - task: DotNetCoreCLI@2
      displayName: 'Compilar la API'
      inputs:
        command: build
        projects: 'HotelCrudApi/HotelCrudApi/HotelCrudApi.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(buildOutput)/api  --self-contained false'
    - task: DotNetCoreCLI@2
      displayName: 'Publicar aplicación'
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: false
    - task: PublishBuildArtifacts@1
      displayName: 'Publicar artefactos de compilación'
      inputs:
        PathtoPublish: '$(buildOutput)'
        ArtifactName: 'drop-back'
        publishLocation: 'Container'
    - task: PublishPipelineArtifact@1
      displayName: 'Publicar Dockerfile de Back'
      inputs:
        targetPath: '$(Build.SourcesDirectory)/docker/api/Dockerfile'
        artifact: 'dockerfile-back'

  - job: BuildAngular
    displayName: "Build and Test Angular"
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: NodeTool@0
      displayName: 'Instalar Node.js'
      inputs:
        versionSpec: '22.x'   
    - task: CmdLine@2
      displayName: 'Instalar dependencias'
      inputs:
        script: npm install
        workingDirectory: $(frontPath)
    - task: CmdLine@2
      displayName: 'Ejecutar pruebas del front'
      continueOnError: true
      inputs:
        script: npx ng test --karma-config=karma.conf.js --watch=false --browsers ChromeHeadless --code-coverage
        workingDirectory: $(frontPath)
    - task: PublishCodeCoverageResults@2
      displayName: 'Publicar resultados de code coverage del front'
      inputs:
        summaryFileLocation: '$(frontPath)/coverage/lcov.info'
        failIfCoverageEmpty: false
      condition: always()
    - task: PublishTestResults@2
      displayName: 'Publicar resultados de pruebas unitarias del front'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(frontPath)/test-results/test-results.xml'
        failTaskOnFailedTests: true
      condition: always()
    - task: CmdLine@2
      displayName: 'Compilar el proyecto Angular'
      condition: succeeded()
      inputs:
        script: npx ng build --configuration production
        workingDirectory: $(frontPath)
    - task: PublishBuildArtifacts@1
      displayName: 'Publicar artefactos Angular'
      inputs:
        pathtoPublish: '$(frontPath)/dist/hotel-crud-angular/browser'
        artifactName: 'drop-front'
        publishLocation: 'Container'
    - task: PublishPipelineArtifact@1
      displayName: 'Publicar Dockerfile de Front'
      inputs:
        targetPath: '$(Build.SourcesDirectory)/docker/front/Dockerfile'
        artifact: 'dockerfile-front'



